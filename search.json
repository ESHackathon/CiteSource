[{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://www.eshackathon.org/CiteSource/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Plot Sandbox","text":"vignette bit sandbox experimentation plots! Currently using working example data (data used “Source Analysis Across Screening Phases” vignette). focus plots exploring. questions, feedback, ideas, etc. vignette others sure check discussion board github! https://github.com/ESHackathon/CiteSource/discussions/100","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"initial-setup","dir":"Articles","previous_headings":"","what":"1. Initial setup","title":"Plot Sandbox","text":"","code":"#Load the necessary libraries library(CiteSource) library(dplyr) library(ggplot2)  #Import citation files from a folder citation_files <- list.files(path = file.path(\"../vignettes/working_example_data\"), pattern = \"\\\\.ris\", full.names = TRUE) #Print citation_files to double check the order in which R imported our files. citation_files # Set the path to the directory containing the citation files file_path <- \"../vignettes/working_example_data/\"  metadata_tbl <- tibble::tribble(   ~files,           ~cite_sources, ~cite_labels,     \"AGRIS.ris\",      \"AGRIS\",       \"search\",        \"CAB.ris\",        \"CAB\",         \"search\",        \"EconLit.ris\",    \"EconLit\",     \"search\",        \"Final.ris\",       NA,           \"final\",         \"GreenFile.ris\",  \"GreenFile\",   \"search\",        \"McK.ris\",        \"Method1\",     \"search\",        \"RM.ris\",         \"Method2\",     \"search\",        \"TiAb.ris\",        NA,           \"screened\",      \"WoS_early.ris\",  \"WoS\",         \"search\",        \"WoS_later.ris\",  \"WoS\",         \"search\" ) %>%   dplyr::mutate(files = paste0(file_path, files)) citations <- read_citations(metadata = metadata_tbl) # Deduplication & Identifying Crossover Records unique_citations <- dedup_citations(citations) # Count number of unique and non-unique citations from different sources and labels n_unique <- count_unique(unique_citations) # Create dataframe indicating occurrence of records across sources source_comparison <- compare_sources(unique_citations, comp_type = \"sources\")"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"heatmaps","dir":"Articles","previous_headings":"2. Current plots","what":"Heatmaps","title":"Plot Sandbox","text":"","code":"my_heatmap <- plot_source_overlap_heatmap(source_comparison)  my_heatmap # Plot overlap as a heatmap matrix as percentage  my_heatmap_percent <- plot_source_overlap_heatmap(source_comparison, plot_type = \"percentages\")  my_heatmap_percent"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"upset-plot","dir":"Articles","previous_headings":"2. Current plots","what":"Upset plot","title":"Plot Sandbox","text":"","code":"# Citation duplication across multitiple resources  my_upset_plot <- plot_source_overlap_upset(source_comparison, decreasing = c(TRUE, TRUE)) #> Plotting a large number of groups. Consider reducing nset or sub-setting the data.  my_upset_plot"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"uniquecrossover-bar-plot","dir":"Articles","previous_headings":"2. Current plots","what":"Unique/Crossover Bar Plot","title":"Plot Sandbox","text":"## 3. Prep expirimental plots ### Unique records count sources","code":"# Unique vs. Duplicate sources across Search/TiAb Screening/Final Inclusion  my_contributions <- plot_contributions(n_unique,   center = TRUE,   bar_order = c(\"search\", \"screened\", \"final\") )  my_contributions #Get unique records from each source and add bibliographic data unique_AGRIS <- n_unique %>%    dplyr::filter(cite_source==\"AGRIS\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_CAB <- n_unique %>%    dplyr::filter(cite_source==\"CAB\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_EconLit <- n_unique %>%    dplyr::filter(cite_source==\"EconLit\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_WoS <- n_unique %>%    dplyr::filter(cite_source==\"WoS\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_Method1 <- n_unique %>%    dplyr::filter(cite_source==\"Method1\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_Method2 <- n_unique %>%    dplyr::filter(cite_source==\"Method2\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  all_unique <- bind_rows(unique_AGRIS, unique_CAB, unique_EconLit,                         unique_WoS, unique_Method1, unique_Method2)"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"publication-year-bar-plots","dir":"Articles","previous_headings":"4. Expirimental plots","what":"Publication year bar plots","title":"Plot Sandbox","text":"","code":"# Filter the \"all_unique\" dataset to only include records with a valid year # Create a new column to represent the year # Group the data by source and year and calculate the count of records for each group year_data <- all_unique %>%   dplyr::mutate(year = as.character(year)) %>%  # Convert \"year\" column to character format   dplyr::filter(stringr::str_detect(year, \"^[0-9]+$\")) %>%  # Remove rows where \"year\" is not numeric   dplyr::mutate(year = as.numeric(year)) %>%  # Convert \"year\" column back to numeric format   dplyr::filter(year > 1965) %>%  # Remove rows where \"year\" is 1965 or earlier   group_by(cite_source.x, year) %>%  # Group data by \"cite_source.x\" and \"year\"   summarise(count = n(), .groups = \"drop\")  # Calculate the number of records in each group   # Create a bar plot to visualize the filtered and grouped data unique_yearplot <- ggplot(year_data, aes(x=year, y=count, fill = cite_source.x)) +   geom_bar(position = \"stack\", stat = \"identity\") +  # Create a stacked bar plot with actual count values scale_x_continuous(breaks = seq(1966, 2023, by = 5))+    coord_cartesian(ylim = c(0, 600)) +  # Set y-axis limits to ensure all bars are visible   xlab(\"Publication year\") +  # Add x-axis label   ylab(\"Unique records\") +  # Add y-axis label   labs(fill = \"Source\")  # Add legend label for the fill color  unique_yearplot"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"interactive-publication-year-bar-plot","dir":"Articles","previous_headings":"4. Expirimental plots","what":"interactive publication year bar plot","title":"Plot Sandbox","text":"","code":"# Creating an interactive plot with plotly library(plotly) #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout  unique_year_funplot <- ggplotly(unique_yearplot, tooltip = c(\"cite_source.x\", \"year\", \"count\"), dynamicTicks = TRUE)  unique_year_funplot"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"sankey-plot-idea","dir":"Articles","previous_headings":"4. Expirimental plots","what":"Sankey plot idea","title":"Plot Sandbox","text":"","code":"#further work needed to integrate Unique_citations into this plot, as this is very manual, but great as an example as to how the three custom fields can be visualized. In this case Strings/Sources/Timeline (Inclusion/Exclusion)  library(networkD3)  # Define nodes nodes <- data.frame(   name = c(\"AG 1\", \"AG 2\", \"AGRIS\",             \"CAB 1\", \"CAB 2\", \"CAB\",            \"EL 1\", \"EL 2\", \"EconLit\",             \"WoS 1\", \"WoS 2\", \"WoS\",             \"Method 1\", \"Method 2\",             \"TI/AB Included\", \"Final Included\", \"Excluded\", \"NA\"),   id = 0:17 )  # Define links links <- data.frame(   source = c(0, 1, 3, 4, 6, 7, 9, 10),   target = c(2, 2, 5, 5, 8, 8, 11, 11),   value = c(100, 150, 100, 150, 100, 150, 100, 100) )  # Add links for the second column nodes (including Method 1 and Method 2) flowing into TI/AB Included and Excluded links <- rbind(links, data.frame(   source = c(2, 5, 8, 11, 2, 5, 8, 11, 12, 12, 13, 13),   target = c(14, 14, 14, 14, 16, 16, 16, 16, 14, 16, 14, 16),   value = c(50, 50, 50, 50, 200, 200, 200, 150, 50, 50, 50, 50) ))  # Add links for TI/AB Included flowing into Final Included and Excluded links <- rbind(links, data.frame(   source = c(14),   target = c(15),   value = c(100) ))  links <- rbind(links, data.frame(   source = c(14),   target = c(16),   value = c(200) ))  nodes <- rbind(nodes, data.frame(   name = c(\"\", \"\"),   id = 17:18 ))  links <- rbind(links, data.frame(   source = c(17, 17),   target = c(12, 13),   value = c(NA, NA) ))  # Create Sankey diagram sankey<-sankeyNetwork(   Links = links,   Nodes = nodes,   Source = \"source\",   Target = \"target\",   Value = \"value\",   NodeID = \"name\",   units = \"\",   fontSize = 12,   nodeWidth = 20,   iterations = 0 ) sankey"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"unique-journal-count-per-source","dir":"Articles","previous_headings":"5. Expirimental source-specific tables","what":"Unique Journal Count per Source","title":"Plot Sandbox","text":"","code":"library(gt) #Exploritory Plot - The following table and functions are not yet integrated into CiteSource  # Create a function to group by journal, count unique citations, and arrange in descending order # This function takes a data frame as input, and returns a processed data frame process_journals <- function(data) {   data %>%     group_by(journal) %>%          # Group the data by journal     summarise(count = n()) %>%     dplyr::filter(journal != \"\") %>%  # Filter out any blank journal titles     arrange(desc(count))             # Arrange the journals in descending order of count }  # Process Journal Titles AGRIS_journals <- process_journals(unique_AGRIS) CAB_journals <- process_journals(unique_CAB)  EconLit_journals <- process_journals(unique_EconLit)  WoS_journals <- process_journals(unique_WoS) Method1_journals <- process_journals(unique_Method1) Method2_journals <- process_journals(unique_Method2)  # Create a function to display a gt table # This function takes a data frame and a caption as input, and returns a gt table display_gt_table <- function(data, caption) {   data %>%     gt() %>%     tab_header(title = caption) %>%  # Set the table title to the provided caption     cols_label(journal = \"Journal\", count = \"Unique Citations\") %>%  # Set column labels     tab_options(       table.width = px(600),       table.font.size = px(12),       heading.title.font.size = px(16),       heading.subtitle.font.size = px(14)     )                                   # Set table styling options }"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"example-of-top-10-journals","dir":"Articles","previous_headings":"5. Expirimental source-specific tables","what":"Example of Top 10 journals","title":"Plot Sandbox","text":"","code":"display_gt_table(CAB_journals[1:10, ], \"Top 10 Journals by Unique Citations CAB\") display_gt_table(WoS_journals[1:10, ], \"Top 10 Journals by Unique Citations WoS\")"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"citation-record-table","dir":"Articles","previous_headings":"6. Current tables","what":"Citation Record Table","title":"Plot Sandbox","text":"","code":"# Citation Record Table  unique_citations %>%   dplyr::filter(stringr::str_detect(cite_label, \"final\")) %>%   record_level_table(return = \"DT\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/Plot_Sandbox.html","id":"new-tables","dir":"Articles","previous_headings":"","what":"7.New Tables","title":"Plot Sandbox","text":"","code":"initial_counts<-record_counts(unique_citations, citations, \"cite_source\")    calculated_counts<-calculate_record_counts(unique_citations, citations, n_unique, \"cite_source\")    phase_counts<-calculate_phase_count(unique_citations, citations, \"cite_source\")  record_counts_table(initial_counts) record_summary_table(calculated_counts) precision_sensitivity_table(phase_counts)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Benchmark Testing","text":"estimating comprehensiveness search, researchers often compile list relevant studies evaluate whether discovered using search strategy. benchmarking important step testing sensitivity search, process can often time consuming. vignette provide example one may use CiteSource speed process benchmarking well iterate development search strings search strategies.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"installation-of-packages-and-loading-libraries","dir":"Articles","previous_headings":"","what":"1. Installation of packages and loading libraries","title":"Benchmark Testing","text":"Use following code install CiteSource. Currently, CiteSource lives GitHub, may need first install remotes package. vignette also uses functions ggplot2 dplyr packages.","code":"#Install the remotes packages to enable installation from GitHub #install.packages(\"remotes\") #library(remotes)  #Install CiteSource #remotes::install_github(\"ESHackathon/CiteSource\")  #Load the necessary libraries library(CiteSource) library(ggplot2) library(dplyr)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"import-files-from-multiple-sources","dir":"Articles","previous_headings":"","what":"2. Import files from multiple sources","title":"Benchmark Testing","text":"Users can import multiple .ris .bib files CiteSource, user can label source information database platform.","code":"# Import citation files from folder citation_files <- list.files(path = \"benchmark_data\", pattern = \"\\\\.ris\", full.names = TRUE)  # Print list of citation files to console citation_files #>  [1] \"benchmark_data/Benchmarking.ris\" \"benchmark_data/Search1_1.ris\"    #>  [3] \"benchmark_data/Search2_1.ris\"    \"benchmark_data/Search2_2.ris\"    #>  [5] \"benchmark_data/Search2_3.ris\"    \"benchmark_data/Search2_4.ris\"    #>  [7] \"benchmark_data/Search3_1.ris\"    \"benchmark_data/Search3_2.ris\"    #>  [9] \"benchmark_data/Search3_3.ris\"    \"benchmark_data/Search3_4.ris\"    #> [11] \"benchmark_data/Search3_5.ris\"    \"benchmark_data/Search4_1.ris\"    #> [13] \"benchmark_data/Search4_2.ris\"    \"benchmark_data/Search4_3.ris\"    #> [15] \"benchmark_data/Search5_1.ris\"    \"benchmark_data/Search5_2.ris\"    #> [17] \"benchmark_data/Search5_3.ris\"    \"benchmark_data/Search5_4.ris\"    #> [19] \"benchmark_data/Search5_5.ris\"    \"benchmark_data/Search5_6.ris\"    #> [21] \"benchmark_data/Search5_7.ris\"    \"benchmark_data/Search5_8.ris\"    #> [23] \"benchmark_data/Search6_1.ris\"    \"benchmark_data/Search6_2.ris\"    #> [25] \"benchmark_data/Search6_3.ris\"    \"benchmark_data/Search6_4.ris\"  # Set the path to the directory containing the citation files file_path <- \"../vignettes/benchmark_data/\"  # Create a tibble that contains metadata about the citation files metadata_tbl <- tibble::tribble(   ~files,            ~cite_sources,   ~cite_labels,    \"Benchmarking.ris\", \"Benchmark\",     \"Benchmark\",       \"Search1_1.ris\",    \"search1\",       \"search\",       \"Search2_1.ris\",    \"search2\",       \"search\",       \"Search2_2.ris\",    \"search2\",       \"search\",        \"Search2_3.ris\",    \"search2\",       \"search\",       \"Search2_4.ris\",    \"search2\",       \"search\",       \"Search3_1.ris\",    \"search3\",       \"search\",       \"Search3_2.ris\",    \"search3\",       \"search\",     \"Search3_3.ris\",    \"search3\",       \"search\",       \"Search3_4.ris\",    \"search3\",       \"search\",   \"Search3_5.ris\",    \"search3\",       \"search\",   \"Search4_1.ris\",    \"search4\",       \"search\",   \"Search4_2.ris\",    \"search4\",       \"search\",   \"Search4_3.ris\",    \"search4\",       \"search\",   \"Search5_1.ris\",    \"search5\",       \"search\",   \"Search5_2.ris\",    \"search5\",       \"search\",   \"Search5_3.ris\",    \"search5\",       \"search\",   \"Search5_4.ris\",    \"search5\",       \"search\",   \"Search5_5.ris\",    \"search5\",       \"search\",   \"Search5_6.ris\",    \"search5\",       \"search\",   \"Search5_7.ris\",    \"search5\",       \"search\",   \"Search5_8.ris\",    \"search5\",       \"search\",   \"Search6_1.ris\",    \"search6\",       \"search\",   \"Search6_2.ris\",    \"search6\",       \"search\",   \"Search6_3.ris\",    \"search6\",       \"search\",   \"Search6_4.ris\",    \"search6\",       \"search\", ) %>%  # Append the file path to each file name in the 'files' column dplyr::mutate(files = paste0(file_path, files)) # Read in citations using metadata table citations <- read_citations(metadata = metadata_tbl) #> Import completed - with the following details: #>                file cite_source cite_string cite_label citations #> 1  Benchmarking.ris   Benchmark        <NA>  Benchmark        55 #> 2     Search1_1.ris     search1        <NA>     search       978 #> 3     Search2_1.ris     search2        <NA>     search      1000 #> 4     Search2_2.ris     search2        <NA>     search      1000 #> 5     Search2_3.ris     search2        <NA>     search      1000 #> 6     Search2_4.ris     search2        <NA>     search        15 #> 7     Search3_1.ris     search3        <NA>     search      1000 #> 8     Search3_2.ris     search3        <NA>     search      1000 #> 9     Search3_3.ris     search3        <NA>     search      1000 #> 10    Search3_4.ris     search3        <NA>     search      1000 #> 11    Search3_5.ris     search3        <NA>     search       214 #> 12    Search4_1.ris     search4        <NA>     search      1000 #> 13    Search4_2.ris     search4        <NA>     search      1000 #> 14    Search4_3.ris     search4        <NA>     search       434 #> 15    Search5_1.ris     search5        <NA>     search      1000 #> 16    Search5_2.ris     search5        <NA>     search      1000 #> 17    Search5_3.ris     search5        <NA>     search      1000 #> 18    Search5_4.ris     search5        <NA>     search      1000 #> 19    Search5_5.ris     search5        <NA>     search      1000 #> 20    Search5_6.ris     search5        <NA>     search      1000 #> 21    Search5_7.ris     search5        <NA>     search      1000 #> 22    Search5_8.ris     search5        <NA>     search       552 #> 23    Search6_1.ris     search6        <NA>     search      1000 #> 24    Search6_2.ris     search6        <NA>     search      1000 #> 25    Search6_3.ris     search6        <NA>     search      1000 #> 26    Search6_4.ris     search6        <NA>     search       593"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"deduplication-and-source-information","dir":"Articles","previous_headings":"","what":"3. Deduplication and source information","title":"Benchmark Testing","text":"CiteSource allows users merge duplicates maintaining information cite_source metadata field. Thus, information origin records lost deduplication process. next steps produce dataframes can use subsequent analyses.","code":"#Deduplicate citations. This yields a dataframe of all records with duplicates merged, but the originating source information maintained in a new variable called cite_source. unique_citations <- dedup_citations(citations)  #Count number of unique and non-unique citations from different sources and labels.  n_unique <- count_unique(unique_citations)  #For each unique citation, determine which sources were present source_comparison <- compare_sources(unique_citations, comp_type = \"sources\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"upset-plot-to-compare-discovery-of-benchmarking-articles","dir":"Articles","previous_headings":"","what":"4. Upset plot to compare discovery of benchmarking articles","title":"Benchmark Testing","text":"upset plot useful visualizing overlap across multiple sources provides detail number shared unique records. Using data ’ll outline potential uses data, looking discovery benchmarking articles. uploaded 55 benchmarking articles. 55 articles can see 6 found across six searches. can see number benchmarking articles discovered string well number articles shared searches. Looking first column can see 9 benchmarking articles found across every search. One may hypothesize 140 citations follow second column may high number relevant articles due fact also discovered across 6 searches. researcher interested building larger group benchmarking articles, ’s possible may want review articles first. Looking plot can see search #5 largest number results, well 6k. , 5,964 unique search. can also see search #5 discovers 3 benchmarking articles otherwise found search employed. researcher may want ensure capture highest number benchmarking articles, addition ~6k articles may efficient result 3 benchmarking articles. Instead including search final strategy, may consider reviewing three articles found search work adjust searches instead. Another decision case may drop search #4 #6 strings contribute uniquely discovery benchmarking articles. data backs decision, may also consider. example, benchmarking articles bias known reason, certain search strategies may employed understanding benchmarking data may accurately reflect potential contribution. (ex. benchmarking articles gathered previous systematic reviews focused specific geographic region current review global nature).","code":"#Generate a source comparison upset plot. plot_source_overlap_upset(source_comparison, decreasing = c(TRUE, TRUE)) #> Plotting a large number of groups. Consider reducing nset or sub-setting the data."},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_benchmark_testing.html","id":"reviewing-the-record-table","dir":"Articles","previous_headings":"","what":"5. Reviewing the record table","title":"Benchmark Testing","text":"record table helpful reviewing citations found across database well quickly checking see benchmarking articles found search.","code":"unique_citations %>%   dplyr::filter(stringr::str_detect(cite_label, \"Benchmark\")) %>%   record_level_table(return = \"DT\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"process developing search strategies evidence synthesis, standard practice test different versions search main database examine records gained lost changes search string test different searches set already known relevant studies (.e., benchmark studies). way, right balance precision sensitivity can achieved prior screening. now, within-database testing primary method pre-screening search validation. CiteSource, can now test search strategies across databases, assess usefulness certain databases search finalizing database set. adds another layer pre-screening search validation can improve precision sensitivity. vignette provides workflow testing search strategy across multiple databases set benchmark studies. example, running search loneliness gambling addiction. developed search strategy PsycInfo, main database. Now, ’d like see searching databases like Web Science PubMed add useful records help us find benchmark studies.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"installation-of-packages-and-loading-libraries","dir":"Articles","previous_headings":"","what":"Installation of packages and loading libraries","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"Use following code install CiteSource. Currently, CiteSource lives GitHub, may need first install remotes package. vignette also uses functions ggplot2 dplyr packages.","code":"#Install the remotes packages to enable installation from GitHub #install.packages(\"remotes\") #library(remotes)  #Install CiteSource #remotes::install_github(\"ESHackathon/CiteSource\")  #Load the necessary libraries library(CiteSource) library(dplyr)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"import-files-from-multiple-sources","dir":"Articles","previous_headings":"","what":"Import files from multiple sources","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"Users can import multiple RIS bibtex files CiteSource, user can label source information database platform.","code":"#Import citation files from folder citation_files <- list.files(path= \"valid_data\", pattern = \"\\\\.ris\", full.names = TRUE)  #Print citation_files to double check the order in which R imported our files. This will typically default to alphabetical, but it is worth checking as in the next step, we assign each file to a group based on their order.  citation_files #> [1] \"valid_data/benchmark.ris\"   \"valid_data/psycinfo_64.ris\" #> [3] \"valid_data/pubmed_46.ris\"   \"valid_data/WoS_79.ris\"  #Read in citations and specify sources. Here we note the sources of our three database searches and then add labels corresponding to their status as benchmark studies or as a database search. citations <- read_citations(citation_files,                             cite_sources = c(NA, \"psycinfo\", \"pubmed\", \"wos\"),                             cite_labels = c(\"benchmark\", \"search\", \"search\", \"search\"),                             tag_naming = \"best_guess\") #> Import completed - with the following details: #>              file cite_source cite_string cite_label citations #> 1   benchmark.ris        <NA>        <NA>  benchmark        13 #> 2 psycinfo_64.ris    psycinfo        <NA>     search        64 #> 3   pubmed_46.ris      pubmed        <NA>     search        46 #> 4      WoS_79.ris         wos        <NA>     search        79"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"deduplication-and-source-information","dir":"Articles","previous_headings":"","what":"Deduplication and source information","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"CiteSource allows users merge duplicates maintaining information cite_source metadata field. Thus, information origin records lost deduplication process. next steps produce dataframes can use subsequent analyses.","code":"#Dedup citations. This yields a dataframe of all records with duplicates merged, but the originating source information maintained in a new variable called cite_source. unique_citations <- dedup_citations(citations)  #Count number of unique and non-unique citations from different sources and labels.  n_unique <- count_unique(unique_citations)  #For each unique citation, determine which sources were present source_comparison <- compare_sources(unique_citations, comp_type = \"sources\")"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"heatmap-by-number-of-records","dir":"Articles","previous_headings":"Plot heatmap to compare source overlap","what":"Heatmap by number of records","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"heatmap can tell us total number records retrieved database, can used compare number overlapping records found pair databases. example, can see Web Science yielded highest number records gambling addiction loneliness, PubMed least.","code":"#Generate source comparison heatmap plot_source_overlap_heatmap(source_comparison)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"heatmap-by-percentage-of-records","dir":"Articles","previous_headings":"Plot heatmap to compare source overlap","what":"Heatmap by percentage of records","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"Another way visualizing heatmap percent overlap. can use plot_type argument produce percentage heatmap follows. total number records appears gray. percentages indicate share records row also found column. example, see 55% records Web Science also found PsycInfo Conversely, 44% records PsycInfo found Web Science.","code":"#Generate heatmap with percent overlap plot_source_overlap_heatmap(source_comparison, plot_type = \"percentages\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"plot-an-upset-plot-to-compare-source-overlap","dir":"Articles","previous_headings":"","what":"Plot an upset plot to compare source overlap","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"upset plot another way visualizing overlap provides bit detail number shared unique records. , can see Web Science unique records found database (n=29), PubMed four unique records. Twenty-four records found every database.","code":"#Generate a source comparison upset plot. plot_source_overlap_upset(source_comparison, decreasing = c(TRUE, TRUE))"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"bar-plots-of-unique-and-shared-records","dir":"Articles","previous_headings":"","what":"Bar plots of unique and shared records","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"Bar plots can another way looking overlap uniqueness database contributions search. can use CiteSource function plot_contributions plot bar chart numbers unique overlapping records. can also add benchmark studies chart view unique non-unique contributions database benchmark set. example….","code":"#Generate bar plot of unique citations PER database and their contribution to the benchmark studies  plot_contributions(n_unique,   center = TRUE)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"analyzing-unique-contributions","dir":"Articles","previous_headings":"","what":"Analyzing unique contributions","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"testing different search strategies single database, can look unique contributions determine contributions useful . words, given total number records database adds search, unique contributions justify amount additional screening time required choose include database final search? Thus, let’s look closely records found database appearing anywhere else. can make use output count_unique function. use dplyr function filter find unique records contributed single sources. use inner_join function regain bibliographic data merging record IDs unique_citations dataframe generated deduplication process.","code":"#Get unique records from each source and add bibliographic data unique_psycinfo <- n_unique %>%    dplyr::filter(cite_source==\"psycinfo\", unique == TRUE) %>%   dplyr::inner_join(unique_citations, by = \"duplicate_id\")  unique_pubmed <- n_unique %>%    dplyr::filter(cite_source==\"pubmed\", unique == TRUE) %>%   dplyr::inner_join(unique_citations, by = \"duplicate_id\")  unique_wos <- n_unique %>%    dplyr::filter(cite_source==\"wos\", unique == TRUE) %>%   dplyr::inner_join(unique_citations, by = \"duplicate_id\")  #To save these dataframes to a csv file for review, use the export_csv function from CiteSource  #export_csv(unique_pubmed, \"pubmed.csv\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"record-level-table","dir":"Articles","previous_headings":"Analyzing unique contributions","what":"Record-Level Table","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"Another way inspect contribution benchmark studies source use CiteSource function record_level_table. can filter unique_citations dataframe benchmark studies output convenient table shows us databases contained studies.","code":"#Get benchmark studies from unique_citations dataframe  unique_citations %>%   dplyr::filter(stringr::str_detect(cite_label, \"benchmark\")) %>%   record_level_table(return = \"DT\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"search-summary-table","dir":"Articles","previous_headings":"Analyzing unique contributions","what":"Search Summary Table","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"search summary table can also useful assess database unique contributions set benchmark studies calculate sensitivity precision scores. CiteSource function citation_summary_table produces useful table containing numbers. Total records records returned source, unique records found source (, Total rows, one source). unique contribution share records found source (, Total rows, one source). Sensitivity share (deduplicated) records retained stage compared total number found particular source. Precision share initial records source retained inclusion stage.","code":"#Generate search summary table citation_summary_table(unique_citations, screening_label = c(\"benchmark\"))"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"exporting-for-further-analysis","dir":"Articles","previous_headings":"","what":"Exporting for further analysis","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"may want export deduplicated set results (dataframes) analysis save convenient format subsequent use. CiteSource offers set export functions called export_csv, export_ris export_bib save dataframes .csv file, .ris file bibtex file, respectively. can also reimport exported csv files pick project analysis without start scratch, making manual adjustments file. Generate .csv file. separate argument can used create separate columns cite_source, cite_label cite_string facilitate analysis. Generate .ris file indicate custom field location cite_source, cite_label cite_string. example, ’ll using Zotero, put cite_source DB field (appear Archive field Zotero) cite_labels N1, creating associated Zotero note file. Generate bibtex file include data cite_source, cite_label cite_string. Reimport file generated export_csv.","code":"#export_csv(unique_citations, filename = \"unique-by-source.csv\", separate = \"cite_source\") #export_ris(unique_citations, filename = \"unique_citations.ris\", source_field = \"DB\", label_field = \"N1\") #export_bib(unique_citations, filename = \"unique_citations.bib\", include = c(\"sources\", \"labels\", \"strings\")) #reimport_csv(\"unique-by-source.csv\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-pre-screen_validation.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Assessing Usefulness of Databases for Evidence Synthesis","text":"can use CiteSource evaluate usefulness different databases overall search strategy screening. example, found PsycInfo Web Science made unique contributions benchmark studies significant proportion unique records compared databases. otherhand, PubMed contribute unique records benchmark studies, mostly overlapped PsycInfo Web Science. provides us evidence suggest searching PubMed may effective database topic.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Comparing Database Topic Coverage","text":"CiteSource can used examine topical overlap databases. example, interested overlap among databases, multi-disciplinary subject-specific, literature harmful effects gambling addiction. assess , ran specific search term “gambling harm*” title abstract fields following databases: Lens, Scopus, Criminal Justice Abstracts, PsycInfo Medline.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"installation-of-packages-and-loading-libraries","dir":"Articles","previous_headings":"","what":"Installation of packages and loading libraries","title":"Comparing Database Topic Coverage","text":"Use following code install CiteSource. Currently, CiteSource lives GitHub, may need first install remotes package. vignette also uses functions ggplot2 dplyr packages.","code":"#Install the remotes packages to enable installation from GitHub #install.packages(\"remotes\") #library(remotes)  #Install CiteSource #remotes::install_github(\"ESHackathon/CiteSource\")  #Load the necessary libraries library(CiteSource) library(ggplot2) library(dplyr) library(knitr)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"import-files-from-multiple-sources","dir":"Articles","previous_headings":"","what":"Import files from multiple sources","title":"Comparing Database Topic Coverage","text":"Users can import multiple RIS bibtex files CiteSource, user can label source information database platform.","code":"#Import citation files from folder citation_files <- list.files(path= \"topic_data\", pattern = \"\\\\.ris\", full.names = TRUE)  #Read in citations and specify sources. Note that labels and strings are not relevant for this use case. citations <- read_citations(citation_files,                             cite_sources = c(\"crimjust\", \"lens\", \"psycinfo\", \"pubmed\", \"scopus\"),                             tag_naming = \"best_guess\") #> Import completed - with the following details: #>                                       file cite_source cite_string cite_label #> 1  20221207_gambling-harms_crimjust_41.ris    crimjust        <NA>       <NA> #> 2      20221207_gambling-harms_lens_49.ris        lens        <NA>       <NA> #> 3 20221207_gambling-harms_psycinfo_124.ris    psycinfo        <NA>       <NA> #> 4   20221207_gambling-harms_pubmed_176.ris      pubmed        <NA>       <NA> #> 5   20221207_gambling-harms_scopus_255.ris      scopus        <NA>       <NA> #>   citations #> 1        41 #> 2        49 #> 3       124 #> 4       176 #> 5       255"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"deduplication-and-source-information","dir":"Articles","previous_headings":"","what":"Deduplication and source information","title":"Comparing Database Topic Coverage","text":"CiteSource allows users merge duplicates maintaining information cite_source metadata field. Thus, information origin records lost deduplication process. next steps produce dataframes can use subsequent analyses.","code":"#Deduplicate citations. This yields a dataframe of all records with duplicates merged, but the originating source information maintained in a new variable called cite_source.  unique_citations <- dedup_citations(citations)  #Count number of unique and non-unique citations from different sources and labels.  n_unique <- count_unique(unique_citations)  #For each unique citation, determine which sources were present source_comparison <- compare_sources(unique_citations, comp_type = \"sources\")"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"heatmap-by-number-of-records","dir":"Articles","previous_headings":"Plot heatmap to compare source overlap","what":"Heatmap by number of records","title":"Comparing Database Topic Coverage","text":"heatmap can tell us total number records retrieved database, can used compare number overlapping records found pair databases. example, can see Scopus yielded highest number records gambling harms, Criminal Justics Abstracts least.","code":"#Generate source comparison heatmap plot_source_overlap_heatmap(source_comparison)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"heatmap-by-percentage-of-records","dir":"Articles","previous_headings":"Plot heatmap to compare source overlap","what":"Heatmap by percentage of records","title":"Comparing Database Topic Coverage","text":"Another way visualizing heatmap percent overlap. can use plot_type argument produce percentage heatmap follows. total number records appears gray. percentages indicate share records row also found column. example, see 67% records Scopus also found PubMed. Conversely, 97% records PubMed found Scopus.","code":"#Generate heatmap with percent overlap plot_source_overlap_heatmap(source_comparison, plot_type = \"percentages\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"plot-an-upset-plot-to-compare-source-overlap","dir":"Articles","previous_headings":"","what":"Plot an upset plot to compare source overlap","title":"Comparing Database Topic Coverage","text":"upset plot another way visualizing overlap provides bit detail number shared unique records. , can see Scopus unique records found database (n=35), Criminal Justice Abstracts one unique record. Six records found every database.","code":"#Generate a source comparison upset plot. plot_source_overlap_upset(source_comparison, decreasing = c(TRUE, TRUE))"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"bar-plot-of-numbers-of-records","dir":"Articles","previous_headings":"Bar plots of unique and shared records","what":"Bar plot of numbers of records","title":"Comparing Database Topic Coverage","text":"Bar plots can another way looking overlap uniqueness databases contributions topic. can use output count_unique function produce bar plot ggplot. see bar plot numbers shared (pink) unique (green), unshared, records database.","code":"#Generate bar plot of unique citations PER database as NUMBER n_unique %>%    select(cite_source, duplicate_id, unique) %>% #remove label /other cols to prevent duplicated rows   ggplot(aes(fill=unique, x=cite_source)) +    geom_bar(position=\"stack\", stat=\"count\") +   xlab(\"\") + ylab(\"Number of citations\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"bar-plot-of-percentages-of-records","dir":"Articles","previous_headings":"Bar plots of unique and shared records","what":"Bar plot of percentages of records","title":"Comparing Database Topic Coverage","text":"can also look proportions. Interestingly, Lens seems greatest proportion unique records gambling harms.","code":"#Generate bar plot of unique citations PER database as PERCENTAGE n_unique %>%    select(cite_source, duplicate_id, unique) %>% #remove label /other cols to prevent duplicated rows   unique() %>%    group_by(cite_source, unique) %>%   count(unique, cite_source) %>%   group_by(cite_source) %>%   mutate(perc = n / sum(n)) %>%   ggplot(aes(fill=unique, x=cite_source, y=perc)) +    geom_bar(position=\"stack\", stat=\"identity\") +   xlab(\"\") + ylab(\"Number of citations\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"bar-plot-with-labels","dir":"Articles","previous_headings":"Bar plots of unique and shared records","what":"Bar plot with labels","title":"Comparing Database Topic Coverage","text":"one option: labeled bar plot dodged bars. useful small numbers unique records compared overall number records.","code":"#Generate dodged bar plot Unique/Crossover PER Source with labels n_unique %>%   select(cite_source, unique) %>%    ggplot(aes(fill=unique, x=cite_source)) +    geom_bar(position=position_dodge(width=0.5)) +   xlab(\"\") + ylab(\"Number of citations\") +   geom_text(stat=\"count\", aes(label=..count..))"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"analyzing-unique-contributions","dir":"Articles","previous_headings":"","what":"Analyzing unique contributions","title":"Comparing Database Topic Coverage","text":"’re trying get sense relative database coverage particular topic, words database contributes search topic compared databases, might want look closely records found database appearing anywhere else. can make use output count_unique function. use dplyr function filter find unique records contributed single sources. use inner_join function regain bibliographic data merging record IDs unique_citations dataframe generated deduplication process.","code":"#Get unique records from each source and add bibliographic data unique_lens <- n_unique %>% filter(cite_source==\"lens\", unique == TRUE) %>% inner_join(unique_citations, by = \"duplicate_id\")  unique_psycinfo <- n_unique %>%    filter(cite_source==\"psycinfo\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_pubmed <- n_unique %>%    filter(cite_source==\"pubmed\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_crimjust <- n_unique %>%    filter(cite_source==\"crimjust\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")  unique_scopus <- n_unique %>%    filter(cite_source==\"scopus\", unique == TRUE) %>%   inner_join(unique_citations, by = \"duplicate_id\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"analyze-journal-titles","dir":"Articles","previous_headings":"Analyzing unique contributions","what":"Analyze journal titles","title":"Comparing Database Topic Coverage","text":"Now can take deeper dive unique records contributed source. example, let’s look top journal titles Scopus produced unique records gambling harms found database.","code":"#Analyze journal titles for unique records scopus_journals <- unique_scopus %>%    group_by(journal) %>%    summarise(count = n()) %>%   arrange(desc(count))  #Use the knitr:kable function to print a nice looking table of the top 10 journals kable(scopus_journals[1:10, ])"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"analyze-publication-years","dir":"Articles","previous_headings":"","what":"Analyze publication years","title":"Comparing Database Topic Coverage","text":"may also want look publication years unique records. example, perhaps one databases coverage better earlier research. Let’s look publication years 35 unique records Scopus. can see mostly recent records, may indicate --date current collection gambling harms Scopus database.  can also compare publication years unique records across database using facet_wrap feature ggplot.","code":"#Group by year, count and produced a line graph unique_scopus %>% group_by(year) %>%    summarise(count = n()) %>%     ggplot(aes(year, count, group=1)) +   geom_line() +   geom_point() +   xlab(\"Publication year\") + ylab(\"Unique records\") #Combine all unique record dataframes into a single dataframe. Note that we'll leave Criminal Justice Abstracts out since there is only one unique record. all_unique <- bind_rows(unique_scopus,unique_lens,unique_pubmed,unique_psycinfo)  #Group by year and source, count and produced a faceted line graph all_unique %>% group_by(cite_source.x, year) %>%    summarise(count = n()) %>%     ggplot(aes(year, count, group=1)) +   geom_line() +   geom_point() +   facet_wrap(~ cite_source.x) +   xlab(\"Publication year\") + ylab(\"Unique records\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"exporting-for-further-analysis","dir":"Articles","previous_headings":"","what":"Exporting for further analysis","title":"Comparing Database Topic Coverage","text":"may want export deduplicated set results (dataframes) analysis save convenient format subsequent use. CiteSource offers set export functions called export_csv, export_ris export_bib save dataframes .csv file, .ris file bibtex file, respectively. can also reimport exported csv files pick project analysis without start scratch, making manual adjustments file. Generate .csv file. separate argument can used create separate columns cite_source, cite_label cite_string facilitate analysis. Generate .ris file indicate custom field location cite_source, cite_label cite_string. example, ’ll using Zotero, put cite_source DB field (appear Archive field Zotero) cite_labels N1, creating associated Zotero note file. Generate bibtex file include data cite_source, cite_label cite_string. Reimport file generated export_csv.","code":"#export_csv(unique_citations, filename = \"unique-by-source.csv\", separate = \"cite_source\") #export_ris(unique_citations, filename = \"unique_citations.ris\", source_field = \"DB\", label_field = \"N1\") #export_bib(unique_citations, filename = \"unique_citations.bib\", include = c(\"sources\", \"labels\", \"strings\")) #reimport_csv(\"unique-by-source.csv\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_vignette_db-topic-coverage.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Comparing Database Topic Coverage","text":"can use CiteSource evaluate coverage different databases specific topic. example, found Scopus content gambling harms including unique content best coverage earlier years. Lens also contributes proportionally large amount unique records, perhaps representing gray literature. analysis sort can help determine databases might useful search evidence synthesis project topic, may used inform collection development decisions.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Source Analysis Across Screening Phases","text":"order complete reliable systematic search one must include multiple resources ensure inclusion relevant studies. exact number sources necessary thorough search can vary depending topic, type review, etc. Along selection search traditional literature sources, methods hand search relevant journals, citation chasing/snowballing, searching websites, etc. can used order minimize risk missing relevant studies. important extra database? much return getting weeks worth combing websites? open resource perform just perform well (better ) one library/institution pays 500k/year ? much time save answers? Wouldn’t knowing answers questions give us better understanding conduct searches? Wouldn’t great speed process without impacting quality, better yet, improve understanding making process faster? main questions team wanted help answer building CiteSource. goal vignette (’d love feedback ) show gather information sources methods impacted review. data vignette based subset data actual project. , ’ll walk CiteSource can import original search results compare information sources, methods, see contributed final review. questions, feedback, ideas, etc. vignette others sure check discussion board github! https://github.com/ESHackathon/CiteSource/discussions/100","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"installation-of-packages-and-loading-libraries","dir":"Articles","previous_headings":"","what":"1. Installation of packages and loading libraries","title":"Source Analysis Across Screening Phases","text":"Use following code install CiteSource. Currently, CiteSource lives GitHub, may need first install remotes package. vignette also uses functions ggplot2 dplyr packages.","code":"#Install the remotes packages to enable installation from GitHub #install.packages(\"remotes\") #library(remotes)  #Install CiteSource #remotes::install_github(\"ESHackathon/CiteSource\")  #Load the necessary libraries library(CiteSource) library(dplyr)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"import-reference-files-and-adding-custom-metadata","dir":"Articles","previous_headings":"","what":"2. Import Reference Files and Adding Custom Metadata","title":"Source Analysis Across Screening Phases","text":"Users can import multiple .ris .bib files CiteSource, can label three custom metadata fields, Cite_Source, Cite_String, Cite_Label. Using Cite_Source field, user can label individual files source information database platform. Beyond source information, users may also use Cite_Source field provide search results using various search methodologies. second field, Cite_Label, can used apply yet another variable. label intended used combination Cite_Source, order track inclusion exclusion citations specific source course title/abstract full text screening. note, CiteSource provide third metadata field ,Cite_String, can used specify another attribute variable. example, use Cite_Source Cite_String may examine unique crossover citations occur databases, simultaneously evaluating unique search string results. ’s possible use Cite_String, fully integrated third field tables plots used vignette. continue develop CiteSource get feedback users, ’ll continue update vignettes.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"indicate-file-location","dir":"Articles","previous_headings":"2. Import Reference Files and Adding Custom Metadata","what":"Indicate file location","title":"Source Analysis Across Screening Phases","text":"","code":"#Import citation files from a folder citation_files <- list.files(path = file.path(\"../vignettes/working_example_data\"), pattern = \"\\\\.ris\", full.names = TRUE)  #Print citation_files to double check the order in which R imported our files. citation_files #>  [1] \"../vignettes/working_example_data/AGRIS.ris\"     #>  [2] \"../vignettes/working_example_data/CAB.ris\"       #>  [3] \"../vignettes/working_example_data/EconLit.ris\"   #>  [4] \"../vignettes/working_example_data/Final.ris\"     #>  [5] \"../vignettes/working_example_data/GreenFile.ris\" #>  [6] \"../vignettes/working_example_data/McK.ris\"       #>  [7] \"../vignettes/working_example_data/RM.ris\"        #>  [8] \"../vignettes/working_example_data/TiAb.ris\"      #>  [9] \"../vignettes/working_example_data/WoS_early.ris\" #> [10] \"../vignettes/working_example_data/WoS_later.ris\""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"read-in-citation-files-and-add-custom-metadata","dir":"Articles","previous_headings":"","what":"3. Read in citation files and add custom metadata","title":"Source Analysis Across Screening Phases","text":"Prior importing CiteSource, recommended users import raw .ris/.bib files citation management software EndNote combine multiple citation files individual source. can reduce complication assist stargazing metadata. features EndNote’s “find reference updates” can also ensure citations complete filling missing metadata fields. example read citaiton files tag citation files resource came using cite_source field. two citation files labeled NA represent file included papers title/abstract screening file included papers full-text screening therefore assigned source.cite_label tag used tag files “search” (initial search results), “screened” (included papers TI/AB screening), “final” (papers included full-text screening).","code":"# Import citation files from folder citation_files <- list.files(path = \"working_example_data\", pattern = \"\\\\.ris\", full.names = TRUE)  # Print list of citation files to console citation_files #>  [1] \"working_example_data/AGRIS.ris\"     \"working_example_data/CAB.ris\"       #>  [3] \"working_example_data/EconLit.ris\"   \"working_example_data/Final.ris\"     #>  [5] \"working_example_data/GreenFile.ris\" \"working_example_data/McK.ris\"       #>  [7] \"working_example_data/RM.ris\"        \"working_example_data/TiAb.ris\"      #>  [9] \"working_example_data/WoS_early.ris\" \"working_example_data/WoS_later.ris\"  # Set the path to the directory containing the citation files file_path <- \"../vignettes/working_example_data/\"  metadata_tbl <- tibble::tribble(   ~files,           ~cite_sources, ~cite_labels,     \"AGRIS.ris\",      \"AGRIS\",       \"search\",        \"CAB.ris\",        \"CAB\",         \"search\",        \"EconLit.ris\",    \"EconLit\",     \"search\",        \"Final.ris\",       NA,           \"final\",         \"GreenFile.ris\",  \"GreenFile\",   \"search\",        \"McK.ris\",        \"Method1\",     \"search\",        \"RM.ris\",         \"Method2\",     \"search\",        \"TiAb.ris\",        NA,           \"screened\",      \"WoS_early.ris\",  \"WoS\",         \"search\",        \"WoS_later.ris\",  \"WoS\",         \"search\" ) %>%   dplyr::mutate(files = paste0(file_path, files)) citations <- read_citations(metadata = metadata_tbl) #> Import completed - with the following details: #>             file cite_source cite_string cite_label citations #> 1      AGRIS.ris       AGRIS        <NA>     search        12 #> 2        CAB.ris         CAB        <NA>     search       687 #> 3    EconLit.ris     EconLit        <NA>     search        50 #> 4      Final.ris        <NA>        <NA>      final       242 #> 5  GreenFile.ris   GreenFile        <NA>     search       139 #> 6        McK.ris     Method1        <NA>     search      2656 #> 7         RM.ris     Method2        <NA>     search       530 #> 8       TiAb.ris        <NA>        <NA>   screened      1573 #> 9  WoS_early.ris         WoS        <NA>     search      2550 #> 10 WoS_later.ris         WoS        <NA>     search       736"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"deduplication-identifying-crossover-records","dir":"Articles","previous_headings":"","what":"4. Deduplication & Identifying Crossover Records","title":"Source Analysis Across Screening Phases","text":"CiteSource allows users merge duplicate records, maintaining information cite_source, cite_label,cite_string fields. Note duplicates assumed published source, pre-prints similar results identified duplicates.","code":"unique_citations <- dedup_citations(citations) #> formatting data... #> identifying potential duplicates... #> identified duplicates! #> flagging potential pairs for manual dedup... #> 9175 citations loaded... #> 3321 duplicate citations removed... #> 5854 unique citations remaining!  # Count number of unique and non-unique citations from different sources and labels n_unique <- count_unique(unique_citations)  # Create dataframe indicating occurrence of records across sources source_comparison <- compare_sources(unique_citations, comp_type = \"sources\")  # initial upload/post internal deduplication table creation initial_counts<-record_counts(unique_citations, citations, \"cite_source\") record_counts_table(initial_counts)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"analyzing-sources-methods","dir":"Articles","previous_headings":"","what":"5. Analyzing Sources & Methods","title":"Source Analysis Across Screening Phases","text":"teams selecting databases inclusion review can extremely difficult determine best resources determine ROI terms time takes apply searches. especially true fields research relies cross-disciplinary resources. tracking /citation found, evidence synthesis community turn track utility various databases/platforms identify relevant resources relates research topic. idea can extended search string comparison well various search strategies methodologies.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"plot-overlap-as-a-heatmap-matrix","dir":"Articles","previous_headings":"5. Analyzing Sources & Methods","what":"Plot overlap as a heatmap matrix","title":"Source Analysis Across Screening Phases","text":"CiteSource performs citation analysis deduplication within source file, prior comparing sources across source files. heatmap shows number citations unique source top source’s column. heatmap also provides count citations found intersection source. case can see source tag “Method 1” shows 2364 records, initial .ris file contained 2656 citations. means CiteSource identified duplicate references within citation list. 2364 remaining citations attributed source. Looking source Greenfile, can see CiteSource find duplicate citations within source counts read 139.","code":"my_heatmap <- plot_source_overlap_heatmap(source_comparison)  my_heatmap"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"plot-overlap-as-a-heatmap-matrix-as-percentage","dir":"Articles","previous_headings":"5. Analyzing Sources & Methods","what":"Plot overlap as a heatmap matrix as percentage","title":"Source Analysis Across Screening Phases","text":"following heatmap provides overview overlapping citations percent source’s count. example EconLit source contains 50 citations, 50 can see previous heatmap 8 citations also source WoSE, represents 16% citations EconLit. hand 8 citations represent .3% total citations WoSE. (currently chart set display whole numbers - considering changing display first decimal)","code":"my_heatmap_percent <- plot_source_overlap_heatmap(source_comparison, plot_type = \"percentages\")  my_heatmap_percent"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"plot-overlap-as-an-upset-plot","dir":"Articles","previous_headings":"5. Analyzing Sources & Methods","what":"Plot overlap as an upset plot","title":"Source Analysis Across Screening Phases","text":"","code":"my_upset_plot <- plot_source_overlap_upset(source_comparison, decreasing = c(TRUE, TRUE)) #> Plotting a large number of groups. Consider reducing nset or sub-setting the data.  my_upset_plot"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"analyzing-records-after-screening","dir":"Articles","previous_headings":"","what":"6. Analyzing records after screening","title":"Source Analysis Across Screening Phases","text":"title abstract screening completed final papers selected, users can analyze contributions source search method screening phases better understand impact review. using “cite_source” data along “cite_label” data, users can analyze number overlapping/unique records source method.","code":""},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"assessing-contribution-of-sources-by-review-stage","dir":"Articles","previous_headings":"6. Analyzing records after screening","what":"Assessing contribution of sources by review stage","title":"Source Analysis Across Screening Phases","text":"","code":"my_contributions <- plot_contributions(n_unique,   center = TRUE,   bar_order = c(\"search\", \"screened\", \"final\") )  my_contributions"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"analyzing-precisionsensitivity","dir":"Articles","previous_headings":"6. Analyzing records after screening","what":"Analyzing Precision/Sensitivity","title":"Source Analysis Across Screening Phases","text":"addition visualizations, may useful export tables additional analysis. Presenting data form search summary table can provide overview source’s impact well precision sensitivity. (see Bethel et al. 2021 search summary tables.)","code":"calculated_counts<-calculate_record_counts(unique_citations, citations, n_unique, \"cite_source\") record_summary_table(calculated_counts) phase_counts<-calculate_phase_count(unique_citations, citations, \"cite_source\") precision_sensitivity_table(phase_counts)"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"creating-a-citation-record-table","dir":"Articles","previous_headings":"6. Analyzing records after screening","what":"Creating a Citation Record Table","title":"Source Analysis Across Screening Phases","text":"Another useful table can exported .csv record-level table. table allows users quickly identify individual citations screened /final present/absent source. source tag default (include = “sources”), can replaced expanded ‘labels’ /‘strings’","code":"unique_citations %>%   dplyr::filter(stringr::str_detect(cite_label, \"final\")) %>%   record_level_table(return = \"DT\")"},{"path":"http://www.eshackathon.org/CiteSource/articles/citesource_working_example.html","id":"exporting-for-further-analysis","dir":"Articles","previous_headings":"","what":"7. Exporting for further analysis","title":"Source Analysis Across Screening Phases","text":"may want export deduplicated set results (dataframes) analysis save convenient format subsequent use. CiteSource offers set export functions called export_csv, export_ris export_bib save dataframes .csv file, .ris file .bib file, respectively. can reimport exported files pick project analysis without start scratch, making manual adjustments (adding missing abstract data) file. Generate .csv file. separate argument can used create separate columns cite_source, cite_label cite_string facilitate analysis. Generate .ris file indicate custom field location cite_source, cite_label cite_string. example, ’ll using EndNote, put cite_sources DB field, appear Name Database field EndNote cite_labels C5, appear Custom 5 metadata field EndNote. Generate bibtex file include data cite_source, cite_label cite_string. order reimport .csv .ris can use follwowing. example reimport file desktop","code":"#export_csv(unique_citations, filename = \"citesource_working_example.csv\", separate = \"cite_source\") #export_ris(unique_citations, filename = \"citesource_working_example.ris\", source_field = \"DB\", label_field = \"C5\") #export_bib(unique_citations, filename = \"citesource_working_example.bib\", include = c(\"sources\", \"labels\", \"strings\")) #citesource_working_example <-reimport_csv(\"citesource_working_example.csv\")  #citesource_working_example <-reimport_ris(\"citesource_working_example.ris\")"},{"path":"http://www.eshackathon.org/CiteSource/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trevor Riley. Author, maintainer. Kaitlyn Hair. Author. Lukas Wallrich. Author. Matthew Grainger. Author. Sarah Young. Author. Chris Pritchard. Author. Neal Haddaway. Author. Martin Westgate. Copyright holder.            Author included synthesisr fragments Eliza Grames. Copyright holder.            Author included synthesisr fragments","code":""},{"path":"http://www.eshackathon.org/CiteSource/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riley T, Hair K, Wallrich L, Grainger M, Young S, Pritchard C, Haddaway N (2023). CiteSource: Analyze utility information sources retrieval methodologies evidence synthesis. R package version 0.0.1, https://www.eshackathon.org/CiteSource/.","code":"@Manual{,   title = {CiteSource: Analyze the utility of information sources and retrieval methodologies for evidence synthesis},   author = {Trevor Riley and Kaitlyn Hair and Lukas Wallrich and Matthew Grainger and Sarah Young and Chris Pritchard and Neal Haddaway},   year = {2023},   note = {R package version 0.0.1},   url = {https://www.eshackathon.org/CiteSource/}, }"},{"path":[]},{"path":"http://www.eshackathon.org/CiteSource/index.html","id":"about-the-pacakge","dir":"","previous_headings":"","what":"About the Pacakge","title":"Analyze the utility of information sources and retrieval\n    methodologies for evidence synthesis","text":"CiteSource developed order provide researchers ability examine utility efficacy literature resources search methodologies. idea behind CiteSource simply allowing users deduplicate citation records, maintaining customizable metadata citation. Development Development project began part Evidence Synthesis Hackathon part Evidence Synthesis & Meta-Analysis R Conference - ESMARConf 2022. learn awesome conference hackathon please visit @ https://esmarconf.org/ License CiteSource created General Public License (>=v3) find information GPL @ https://www.gnu.org/licenses/gpl-3.0.html","code":""},{"path":"http://www.eshackathon.org/CiteSource/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Analyze the utility of information sources and retrieval\n    methodologies for evidence synthesis","text":"Customizable Metadata Tags Users can provide customizable metadata 3 fields, cite_source, cite_string, cite_label. metadata can include anything resource name (ex.Web Science, LENS.org, PubMed), method (database search, handsearching, citation snowballing), variation used within method (WoS string #1, Wos string #2, WoS string #3), research phase (search, Ti/Ab screening, Full-text Screening), unique group citations (benchmarking articles, articles previous review, articles specific author affiliation). Record Merging CiteSource deduplication process better described record merging process due fact customizable metadata duplicate records maintained creation single, primary record. Beyond merging customizable metadata, primary record created using complete metadata available duplicate records (currently DOI Abstract fields).ASySD package, developed Kaitlyn Hair serves backbone process. Table Plot Visualizations records deduplicated, users able easily create plots tables order answer specific questions simply explore data effort develop new hypotheses. Examples analysis may include many unique records specific source contributed traditional methods searching fare new AI discovery tool discovering relevant articles. Users may want understand overlap records two different search strings evaluate impact including Google Scholar review. searching, user may even develop targeted search better understand topical coverage across databases intend search, search developed, particular source, string, method performed discovering benchmarking articles.","code":""},{"path":"http://www.eshackathon.org/CiteSource/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Analyze the utility of information sources and retrieval\n    methodologies for evidence synthesis","text":"Installation Install CiteSource R remotes::install_github(“ESHackathon/CiteSource”) Vignettes Vignettes covering various use cases can found CiteSource web page https://www.eshackathon.org/CiteSource/.","code":""},{"path":"http://www.eshackathon.org/CiteSource/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"Analyze the utility of information sources and retrieval\n    methodologies for evidence synthesis","text":"sure check discussion page engage us learn various use cases CiteSource. can provide comments/suggestions suggest vignette specific use case. https://github.com/ESHackathon/CiteSource/discussions.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/CiteSource.html","id":null,"dir":"Reference","previous_headings":"","what":"CiteSource: A package to compare sources of citation records — CiteSource","title":"CiteSource: A package to compare sources of citation records — CiteSource","text":"CiteSource package supports evidence aggregation helping processing results various searches different sources. allows deduplicate results retaining meta-data results found enables users compare contribution different sources","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_phase_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate phase counts, precision, and recall — calculate_phase_count","title":"Calculate phase counts, precision, and recall — calculate_phase_count","text":"function calculates counts different phases calculates precision recall source based unique citations citations dataframe.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_phase_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate phase counts, precision, and recall — calculate_phase_count","text":"","code":"calculate_phase_count(unique_citations, citations, db_colname)"},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_phase_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate phase counts, precision, and recall — calculate_phase_count","text":"unique_citations dataframe containing unique citations phase information. citations dataframe containing citations phase information. db_colname name column representing source database.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_phase_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate phase counts, precision, and recall — calculate_phase_count","text":"dataframe containing distinct counts, counts different phases, precision, recall source, well totals.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_record_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate record counts function\nCalculate and combine counts of distinct records, imported records, and unique records for each database — calculate_record_counts","title":"Calculate record counts function\nCalculate and combine counts of distinct records, imported records, and unique records for each database — calculate_record_counts","text":"function calculates counts distinct records, records imported, unique records database source. combines counts one dataframe calculates several ratios percentages related unique distinct counts. also calculates total count type.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_record_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate record counts function\nCalculate and combine counts of distinct records, imported records, and unique records for each database — calculate_record_counts","text":"","code":"calculate_record_counts(unique_citations, citations, n_unique, db_colname)"},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_record_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate record counts function\nCalculate and combine counts of distinct records, imported records, and unique records for each database — calculate_record_counts","text":"unique_citations Dataframe. dataframe calculating distinct records count. citations Dataframe. dataframe calculating records imported count. n_unique Dataframe. dataframe calculating unique records count. db_colname Character. name column containing database source information.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/calculate_record_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate record counts function\nCalculate and combine counts of distinct records, imported records, and unique records for each database — calculate_record_counts","text":"dataframe counts distinct records, imported records, unique records source, including total counts several calculated ratios percentages.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/citation_summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Contribution summary table — citation_summary_table","title":"Contribution summary table — citation_summary_table","text":"Create summary table show contribution source overall performance search. work, labels need used contrast \"search\" stage one later stages.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/citation_summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contribution summary table — citation_summary_table","text":"","code":"citation_summary_table(   citations,   comparison_type = \"sources\",   search_label = \"search\",   screening_label = \"final\",   top_n = NULL )"},{"path":"http://www.eshackathon.org/CiteSource/reference/citation_summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contribution summary table — citation_summary_table","text":"citations deduplicated tibble returned dedup_citations(). comparison_type Either \"sources\" summarise assess sources \"strings\" consider strings. search_label One multiple labels identify initial search results (default: \"search\") - multiple labels provided, merged. screening_label One multiple label identify screened records (default: \"final\") - multiple provided, compared search stage. top_n Number sources/strings display, based number total records contributed search stage. Note calculations totals still based citations. Defaults NULL, sources/strings displayed.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/citation_summary_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contribution summary table — citation_summary_table","text":"tibble containing contribution summary table, shows contribution source overall performance search","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/citation_summary_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contribution summary table — citation_summary_table","text":"","code":"if (interactive()) { # Load example data from the package examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\") examplecitations <- readRDS(examplecitations_path)  # Deduplicate citations and compare sources unique_citations <- dedup_citations(examplecitations)  unique_citations |>  dplyr::filter(stringr::str_detect(cite_label, \"final\"))  |>  record_level_table(return = \"DT\") citation_summary_table(unique_citations, screening_label = c(\"screened\", \"final\")) }"},{"path":"http://www.eshackathon.org/CiteSource/reference/compare_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare duplicate citations across sources, labels, and strings — compare_sources","title":"Compare duplicate citations across sources, labels, and strings — compare_sources","text":"Compare duplicate citations across sources, labels, strings","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/compare_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare duplicate citations across sources, labels, and strings — compare_sources","text":"","code":"compare_sources(   unique_data,   comp_type = c(\"sources\", \"strings\", \"labels\"),   include_references = FALSE )"},{"path":"http://www.eshackathon.org/CiteSource/reference/compare_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare duplicate citations across sources, labels, and strings — compare_sources","text":"unique_data ASySD, merged unique rows duplicate IDs comp_type Specify fields included. One \"sources\", \"strings\" \"labels\" - defaults . include_references bibliographic detail included return?","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/compare_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare duplicate citations across sources, labels, and strings — compare_sources","text":"dataframe indicators citation appears, sources/labels/strings columns","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/compare_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare duplicate citations across sources, labels, and strings — compare_sources","text":"","code":"if (interactive()) {   # Load example data from the package   examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\")   examplecitations <- readRDS(examplecitations_path)    # Deduplicate citations and compare sources   dedup_results <- dedup_citations(examplecitations)   compare_sources(unique_citations, comp_type = \"sources\") }"},{"path":"http://www.eshackathon.org/CiteSource/reference/count_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Count sources function\nCount database source occurrences in a column — count_sources","title":"Count sources function\nCount database source occurrences in a column — count_sources","text":"function counts occurrences different database sources present specific column dataframe. returns dataframe counts source.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count sources function\nCount database source occurrences in a column — count_sources","text":"","code":"count_sources(df, db_colname)"},{"path":"http://www.eshackathon.org/CiteSource/reference/count_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count sources function\nCount database source occurrences in a column — count_sources","text":"df Dataframe. dataframe containing data analyzed. db_colname Character. name column containing database source information.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count sources function\nCount database source occurrences in a column — count_sources","text":"dataframe names sources corresponding counts.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","title":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","text":"Count number unique non-unique citations different sources, labels, strings","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","text":"","code":"count_unique(unique_data, include_references = FALSE)"},{"path":"http://www.eshackathon.org/CiteSource/reference/count_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","text":"unique_data ASySD, merged unique rows duplicate IDs include_references bibliographic detail included return?","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","text":"dataframe indicators citation appears, source/label/string column","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/count_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of unique and non-unique citations from different sources, labels, and strings — count_unique","text":"","code":"# Load example data from the package examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\") examplecitations <- readRDS(examplecitations_path)  # Deduplicate citations dedup_results <- dedup_citations(examplecitations) #> formatting data... #> Warning: Search contains missing values for the record_id column. A record_id will be created using row names #> identifying potential duplicates... #> identified duplicates! #> flagging potential pairs for manual dedup... #> 165 citations loaded... #> 67 duplicate citations removed... #> 98 unique citations remaining!  # Count unique and non-unique citations count_unique(dedup_results) #> # A tibble: 166 × 7 #>    duplicate_id cite_source cite_label cite_string record_ids       unique type  #>    <chr>        <chr>       <chr>      <lgl>       <chr>            <lgl>  <fct> #>  1 1001         DIM         search     NA          1001             TRUE   uniq… #>  2 1002         WoS         search     NA          1002, 1081       FALSE  dupl… #>  3 1002         DIM         search     NA          1002, 1081       FALSE  dupl… #>  4 1003         WoS         search     NA          1003             TRUE   uniq… #>  5 1004         LENS        search     NA          1004             TRUE   uniq… #>  6 1005         DIM         search     NA          1005, 1140       TRUE   uniq… #>  7 1005         DIM         screened   NA          1005, 1140       TRUE   uniq… #>  8 1006         DIM         search     NA          1006             TRUE   uniq… #>  9 1007         WoS         search     NA          1007, 1117, 1164 TRUE   uniq… #> 10 1007         WoS         screened   NA          1007, 1117, 1164 TRUE   uniq… #> # ℹ 156 more rows"},{"path":"http://www.eshackathon.org/CiteSource/reference/dedup_citations.html","id":null,"dir":"Reference","previous_headings":"","what":"Deduplicate citations - ASySD wrapper — dedup_citations","title":"Deduplicate citations - ASySD wrapper — dedup_citations","text":"function deduplicates citation data. Note duplicates assumed published journal, pre-prints similar results identified .","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/dedup_citations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deduplicate citations - ASySD wrapper — dedup_citations","text":"","code":"dedup_citations(raw_citations, manual = FALSE, shiny_progress = FALSE)"},{"path":"http://www.eshackathon.org/CiteSource/reference/dedup_citations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deduplicate citations - ASySD wrapper — dedup_citations","text":"raw_citations Citation dataframe relevant columns manual logical. TRUE, manually specify pairs duplicates merge. Default FALSE. shiny_progress logical. TRUE, show progress bar Shiny app. Default FALSE.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/dedup_citations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deduplicate citations - ASySD wrapper — dedup_citations","text":"unique citations formatted CiteSource","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/dedup_citations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deduplicate citations - ASySD wrapper — dedup_citations","text":"","code":"# Load example data from the package examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\") examplecitations <- readRDS(examplecitations_path)  # Deduplicate citations dedup_results <- dedup_citations(examplecitations) #> formatting data... #> Warning: Search contains missing values for the record_id column. A record_id will be created using row names #> identifying potential duplicates... #> identified duplicates! #> flagging potential pairs for manual dedup... #> 165 citations loaded... #> 67 duplicate citations removed... #> 98 unique citations remaining!"},{"path":"http://www.eshackathon.org/CiteSource/reference/detect_.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect file formatting information — detect_","title":"Detect file formatting information — detect_","text":"Bibliographic data can stored number different file types, meaning detecting consistent attributes files necessary parsed accurately. functions attempt identify key file attributes. Specifically, detect_parser determines parse_ function use; detect_delimiter detect_lookup identify different attributes RIS files; detect_year attempts fill gaps publication years information stored data.frame.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/detect_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect file formatting information — detect_","text":"","code":"detect_parser(x)  detect_delimiter(x)  detect_lookup(tags)  detect_year(df)"},{"path":"http://www.eshackathon.org/CiteSource/reference/detect_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect file formatting information — detect_","text":"x character vector containing bibliographic data tags character vector containing RIS tags. df data.frame containing bibliographic data","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/detect_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect file formatting information — detect_","text":"detect_parser detect_delimiter return length-1 character; detect_year returns character vector listing estimated publication years; detect_lookup returns data.frame.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_bib.html","id":null,"dir":"Reference","previous_headings":"","what":"Export deduplicated citations to .bib file — export_bib","title":"Export deduplicated citations to .bib file — export_bib","text":"function saves deduplicated citations BibTex file sources, labels strings included note field (initially provided citations). Therefore, beware note field might included citations overwritten. Also note existing files overwritten without warning.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_bib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export deduplicated citations to .bib file — export_bib","text":"","code":"export_bib(   citations,   filename = \"citations.bib\",   include = c(\"sources\", \"labels\", \"strings\") )"},{"path":"http://www.eshackathon.org/CiteSource/reference/export_bib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export deduplicated citations to .bib file — export_bib","text":"citations Dataframe unique citations, resulting dedup_citations() filename Name (path) file, end .ris include Character. One sources, labels strings","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_bib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export deduplicated citations to .bib file — export_bib","text":"","code":"if (interactive()) {   # Load example data from the package   examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\")   examplecitations <- readRDS(examplecitations_path)   dedup_results <- dedup_citations(examplecitations, merge_citations = TRUE)   export_bib(dedup_results$unique, \"cite_sources.bib\", include = \"sources\") }"},{"path":"http://www.eshackathon.org/CiteSource/reference/export_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export deduplicated citations with source data as csv file — export_csv","title":"Export deduplicated citations with source data as csv file — export_csv","text":"function saves deduplicated citations csv file analysis /reporting. Metadata can separated one column per source, label string, facilitates analysis. Note existing files overwritten without warning.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export deduplicated citations with source data as csv file — export_csv","text":"","code":"export_csv(   citations,   filename = \"citations.csv\",   separate = NULL,   trim_abstracts = 32000 )"},{"path":"http://www.eshackathon.org/CiteSource/reference/export_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export deduplicated citations with source data as csv file — export_csv","text":"citations Dataframe unique citations, resulting dedup_citations() filename Name (path) file, end .csv separate Character vector indicating () cite_source, cite_string cite_label split separate columns facilitate analysis. trim_abstracts databases may return full-text misidentified abstract. inflates file size may lead issues Excel, deal 32,000 characters per field. Therefore, default trim long abstracts 32,000 characters. Set lower number reduce file size, NULL retain abstracts .","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export deduplicated citations with source data as csv file — export_csv","text":"","code":"if (interactive()) {   # Load example data from the package   examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\")   examplecitations <- readRDS(examplecitations_path)   dedup_results <- dedup_citations(examplecitations, merge_citations = TRUE)   export_csv(dedup_results, \"cite_sources.csv\", separate = \"cite_source\") }"},{"path":"http://www.eshackathon.org/CiteSource/reference/export_ris.html","id":null,"dir":"Reference","previous_headings":"","what":"Export deduplicated citations to RIS file — export_ris","title":"Export deduplicated citations to RIS file — export_ris","text":"function saves deduplicated citations RIS file sources, labels strings included custom fields (initially provided citations). Note existing files overwritten without warning.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_ris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export deduplicated citations to RIS file — export_ris","text":"","code":"export_ris(   citations,   filename = \"citations.ris\",   source_field = \"DB\",   label_field = \"C7\",   string_field = \"C8\" )"},{"path":"http://www.eshackathon.org/CiteSource/reference/export_ris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export deduplicated citations to RIS file — export_ris","text":"citations Dataframe unique citations, resulting dedup_citations() filename Name (path) file, end .ris source_field Character. RIS field cite_sources saved ? NULL exclude. label_field Character. RIS field cite_labels saved ? NULL exclude. string_field Character. RIS field cite_strings saved ? NULL exclude.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/export_ris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export deduplicated citations to RIS file — export_ris","text":"","code":"if (interactive()) {   # Load example data from the package   examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\")   examplecitations <- readRDS(examplecitations_path)   dedup_results <- dedup_citations(examplecitations, merge_citations = TRUE)   export_ris(dedup_results$unique, \"cite_sources.ris\", string_field = NULL) }"},{"path":"http://www.eshackathon.org/CiteSource/reference/merge_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or more data frames with different columns — merge_columns","title":"Bind two or more data frames with different columns — merge_columns","text":"Takes two data.frames different column names different column orders binds single data.frame.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/merge_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or more data frames with different columns — merge_columns","text":"","code":"merge_columns(x, y)"},{"path":"http://www.eshackathon.org/CiteSource/reference/merge_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or more data frames with different columns — merge_columns","text":"x Either data.frame list data.frames. y data.frame, optional x list.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/merge_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or more data frames with different columns — merge_columns","text":"Returns single data.frame input data frames merged.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/parse_.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse bibliographic text in a variety of formats — parse_","title":"Parse bibliographic text in a variety of formats — parse_","text":"Text standard formats - imported via readLines - can parsed using variety standard formats. Use detect_parser determine appropriate parser situation.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/parse_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse bibliographic text in a variety of formats — parse_","text":"","code":"parse_pubmed(x)  parse_ris(x, tag_naming = \"best_guess\")  parse_bibtex(x)  parse_csv(x)  parse_tsv(x)"},{"path":"http://www.eshackathon.org/CiteSource/reference/parse_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse bibliographic text in a variety of formats — parse_","text":"x character vector containing bibliographic information ris format. tag_naming format ris tags ? Defaults \"best_guess\" See synthesisr_read_refs list accepted arguments.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/parse_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse bibliographic text in a variety of formats — parse_","text":"Returns object class bibliography (ris, bib, pubmed formats) data.frame (csv tsv).","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://www.eshackathon.org/CiteSource/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_contributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bar chart that compares source contributions over stages — plot_contributions","title":"Create a bar chart that compares source contributions over stages — plot_contributions","text":"Create faceted plot shows unique contributions duplicated records across two metadata dimensions. typical use-case might show contributions source across different screening stages.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_contributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar chart that compares source contributions over stages — plot_contributions","text":"","code":"plot_contributions(   data,   facets = cite_source,   bars = cite_label,   color = type,   center = FALSE,   bar_order = \"keep\",   facet_order = \"keep\",   color_order = \"keep\",   totals_in_legend = TRUE )"},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_contributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar chart that compares source contributions over stages — plot_contributions","text":"data tibble one hit per row, variables indicating meta-data interest. facets Variable data used facets (.e. sub-plots). Defaults source (.e. cite_source). Specify NULL refrain faceting. bars Variable data used bars. Defaults label (.e. cite_label) color Color used fill bars. Default unique center Logical. one color one axis? bar_order Character. Order bars within facet, levels specified follow end. \"keep\", based factor levels (first value) input data. facet_order Character. Order facets. levels specified follow end. color_order Character. Order values color scale. totals_in_legend Logical. totals shown legend (e.g. Unique (N = 1234))","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_contributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar chart that compares source contributions over stages — plot_contributions","text":"","code":"data <- data.frame(   article_id = 1:100,   cite_source = sample(c(\"DB 1\", \"DB 2\", \"DB 3\"), 100, replace = TRUE),   cite_label = sample(c(\"2020\", \"2021\", \"2022\"), 100, replace = TRUE),   type = c(\"unique\", \"duplicated\")[rbinom(100, 1, .7) + 1] )  plot_contributions(data,   center = TRUE, bar_order = c(\"2022\", \"2021\", \"2020\"),   color_order = c(\"unique\", \"duplicated\") )"},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","title":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","text":"Show overlap different record sources, either showing number percentages shared records pair sources.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","text":"","code":"plot_source_overlap_heatmap(   data,   cells = \"source\",   facets = NULL,   plot_type = c(\"counts\", \"percentages\"),   sort_sources = TRUE,   interactive = FALSE )"},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","text":"data tibble one record per row, id column one column per source indicating whether record found source. cells Variable display cells. 'source', 'label' 'string' facets Variable data used facets (.e. sub-plots). NULL, 'source', 'label' 'string' plot_type Either counts (number shared records) percentages (share overlapping records). sort_sources sources shown based number records contained? FALSE, order data retained. interactive returned plot interactive enable user export records underlying field?","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","text":"requested plot either ggplot2 object (interactive = FALSE), can formatted saved using ggplot2::ggsave(), plotly object interactive = TRUE","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap matrix showing the overlap between sources — plot_source_overlap_heatmap","text":"","code":"data <- data.frame(   article_id = 1:500,   source__source1 = rbinom(500, 1, .5) == 1,   source__source2 = rbinom(500, 1, .2) == 1,   source__source3 = rbinom(500, 1, .1) == 1,   source__source4 = rbinom(500, 1, .6) == 1,   source__source5 = rbinom(500, 1, .7) == 1 )  plot_source_overlap_heatmap(data)  plot_source_overlap_heatmap(data, plot_type = \"percentages\")"},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_upset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","title":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","text":"Show records found specific sets sources identify unique contribution source subsets","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_upset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","text":"","code":"plot_source_overlap_upset(   data,   groups = \"source\",   nsets = NULL,   sets.x.label = \"Number of records\",   mainbar.y.label = \"Overlapping record count\",   order.by = c(\"freq\", \"degree\"),   ... )"},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_upset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","text":"data tibble one record per row, id column one column per source indicating whether record found source. groups Variable use groups. 'source', 'label' 'string' - defaults source. nsets Number sets look sets.x.label x-axis label set size bar plot mainbar.y.label y-axis label intersection size bar plot order.intersections matrix ordered . Options include frequency (entered \"freq\"), degree, order. ... Arguments passed UpSetR::upset nintersects Number intersections plot. set NA, intersections plotted. sets Specific sets look (Include combinations. Ex: c(\"Name1\", \"Name2\")) keep.order Keep sets order entered using sets parameter. default FALSE, orders sets sizes. set.metadata Metadata offers insight attribute sets. Input data frame first column set names, remaining columns attributes sets. learn use parameter highly suggested view set metadata vignette. link can found package's GitHub page. intersections Specific intersections include plot entered list lists. Ex: list(list(\"Set name1\", \"Set name2\"), list(\"Set name1\", \"Set name3\")). data entered parameter data shown UpSet plot specific intersections listed. matrix.color Color intersection points main.bar.color Color main bar plot mainbar.y.max maximum y value intersection size bar plot scale. May useful aligning multiple UpSet plots horizontally. sets.bar.color Color set size bar plot point.size Size points matrix plot line.size Width lines matrix plot mb.ratio Ratio matrix plot main bar plot (Keep terms hundredths) expression Expression subset attributes intersection element query data. Enter string (Ex: \"ColName > 3\") att.pos Position attribute plot. NULL \"bottom\" plot UpSet plot. \"top\" UpSet plot att.color Color attribute histogram bins scatterplot points unqueried data represented main bars. Default set color main bars. decreasing variables order.ordered. \"freq\" decreasing (greatest least) \"degree\" increasing (least greatest) show.numbers Show numbers intersection sizes bars number.angles angle numbers atop intersection size bars group.data grouped (\"degree\" \"sets\") cutoff number intersections set (cut ) aggregating sets queries Unified query intersections, elements, custom row functions. Entered list contains list queries. query type query conducted. params parameters query (). color color points plot represent query. color selected one provided automatically. active takes TRUE FALSE, TRUE, overlay bars present  results query. FALSE tick mark indicate intersection size. See examples section . query.legend Position query legend top bottom UpSet plot shade.color Color row shading matrix shade.alpha Transparency shading matrix matrix.dot.alpha Transparency empty intersections points matrix empty.intersections Additionally display empty sets nintersects color.pal Color palette attribute plots boxplot.summary Boxplots representing distribution selected attribute intersection. Select attributes entering character vector attribute names (e.g. c(\"Name1\", \"Name2\")). maximum number attributes can entered 2. attribute.plots Create custom ggplot using intersection data represented main bar plot. Prior adding custom plots, UpSet plot set 100 100 grid. attribute.plots parameter takes list contains number rows allocated custom plot, list plots specified positions. nrows number rows custom plots take . already 100 allocated custom plot. plots takes list contains function returns custom ggplot x y aesthetics function. ncols number columns ggplots take . See examples add custom ggplots. scale.intersections scale used intersection sizes. Options: \"identity\", \"log10\", \"log2\" scale.sets scale used set sizes. Options: \"identity\", \"log10\", \"log2\" text.scale Numeric, value scale text sizes, applies axis labels, tick labels, numbers bar plot. Can universal scale, vector containing individual scales following format: c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers bars) set_size.angles Numeric, angle rotate set size plot x-axis text set_size.show Logical, display set sizes set size bar chart set_size.numbers_size set_size.show TRUE, adjust size numbers set_size.scale_max Increase maximum set size scale","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_upset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","text":"Conway, J. R., Lex, ., & Gehlenborg, N. (2017). UpSetR: R package visualization intersecting sets properties. Bioinformatics.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/plot_source_overlap_upset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an UpSetR upset plot showing the overlap between sources — plot_source_overlap_upset","text":"","code":"data <- data.frame(   article_id = 1:500,   source__source1 = rbinom(500, 1, .5) == 1,   source__source2 = rbinom(500, 1, .2) == 1,   source__source3 = rbinom(500, 1, .1) == 1,   source__source4 = rbinom(500, 1, .6) == 1,   source__source5 = rbinom(500, 1, .7) == 1 )  plot_source_overlap_upset(data)   # To start with the records shared among the greatest number of sources, use  plot_source_overlap_upset(data, decreasing = c(TRUE, TRUE))"},{"path":"http://www.eshackathon.org/CiteSource/reference/precision_sensitivity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"precision_sensitivity_table — precision_sensitivity_table","title":"precision_sensitivity_table — precision_sensitivity_table","text":"function creates table footnotes columns table. uses gt package create table adds footnotes various columns.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/precision_sensitivity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"precision_sensitivity_table — precision_sensitivity_table","text":"","code":"precision_sensitivity_table(data)"},{"path":"http://www.eshackathon.org/CiteSource/reference/precision_sensitivity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"precision_sensitivity_table — precision_sensitivity_table","text":"data data frame must contain columns \"Source\", \"Distinct Records\", \"Screened Included\", \"Final Included\", \"Precision\", \"Recall\". \"Source\" column used row names table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/precision_sensitivity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"precision_sensitivity_table — precision_sensitivity_table","text":"gt object representing table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/read_citations.html","id":null,"dir":"Reference","previous_headings":"","what":"Import citations from file — read_citations","title":"Import citations from file — read_citations","text":"function imports RIS Bibtex files citations merges one long tibble one record per line.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/read_citations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import citations from file — read_citations","text":"","code":"read_citations(   files = NULL,   cite_sources = NULL,   cite_strings = NULL,   cite_labels = NULL,   metadata = NULL,   verbose = TRUE,   tag_naming = \"best_guess\" )"},{"path":"http://www.eshackathon.org/CiteSource/reference/read_citations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import citations from file — read_citations","text":"files One multiple RIS Bibtex files citations. .bib .ris files cite_sources origin citation files (e.g. \"Scopus\", \"WOS\", \"Medline\") - vector one value per file, defaults file names. cite_strings Optional. search string used (another grouping analyse) - vector one value per file cite_labels Optional. additional label per file, instance stage search - vector one value per file metadata tibble file names metadata file. Can specified alternative files, cite_sources, cite_strings cite_labels. verbose number reference allocation labels reported? tag_naming Either length-1 character stating ris tags replaced (see details list options), object inheriting class data.frame containing user-defined replacement tags.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/read_citations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import citations from file — read_citations","text":"tibble one row per citation","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/read_citations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import citations from file — read_citations","text":"","code":"if (interactive()) {   read_citations(c(\"res.ris\", \"res.bib\"),     cite_sources = c(\"CINAHL\", \"MEDLINE\"),     cite_strings = c(\"Search1\", \"Search2\"),     cite_labels = c(\"raw\", \"screened\")   )      # or equivalently      metadata_tbl <- tibble::tribble(    ~files,     ~cite_sources, ~cite_strings, ~cite_labels,    \"res.ris\",  \"CINAHL\",      \"Search1\",     \"raw\",    \"res.bib\",  \"MEDLINE\",     \"Search2\",     \"screened\"   )      read_citations(metadata = metadata_tbl)    }"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Record counts function\nCalculate and combine counts of distinct records and imported records for each database — record_counts","title":"Record counts function\nCalculate and combine counts of distinct records and imported records for each database — record_counts","text":"function calculates counts distinct records records imported database source. combines counts one dataframe calculates total count type.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record counts function\nCalculate and combine counts of distinct records and imported records for each database — record_counts","text":"","code":"record_counts(df1, df2, db_colname)"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record counts function\nCalculate and combine counts of distinct records and imported records for each database — record_counts","text":"df1 Dataframe. dataframe calculating distinct records count. df2 Dataframe. dataframe calculating records imported count. db_colname Character. name column containing database source information.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record counts function\nCalculate and combine counts of distinct records and imported records for each database — record_counts","text":"dataframe counts distinct records imported records source, including total counts.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts_table.html","id":null,"dir":"Reference","previous_headings":"","what":"record_counts_table — record_counts_table","title":"record_counts_table — record_counts_table","text":"function creates table footnotes columns table. uses gt package create table adds footnotes \"Records Imported\" \"Distinct Records\" columns.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"record_counts_table — record_counts_table","text":"","code":"record_counts_table(data)"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"record_counts_table — record_counts_table","text":"data data frame must contain columns \"Source\", \"Records Imported\", \"Distinct Records\". \"Source\" column used row names table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_counts_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"record_counts_table — record_counts_table","text":"gt object representing table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_level_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Record-level table — record_level_table","title":"Record-level table — record_level_table","text":"Creates per-record table shows sources (/labels/strings) item found .","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_level_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record-level table — record_level_table","text":"","code":"record_level_table(   citations,   include = \"sources\",   include_empty = TRUE,   return = c(\"tibble\", \"DT\"),   indicator_presence = NULL,   indicator_absence = NULL )"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_level_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record-level table — record_level_table","text":"citations deduplicated tibble returned dedup_citations(). include metadata included table? Defaults 'sources', can replaced expanded 'labels' /'strings' include_empty records empty metadata (e.g., information 'sources') included table? Defaults FALSE. return Either tibble can exported, e.g. csv, DataTable (DT) allows interactive exploration. Note DataTable allows users download .csv file; file, presence absence always indicated TRUE FALSE prevent issues character encodings. indicator_presence indicated value present source/label/string? Defaults TRUE tibbles tickmark DT tables indicator_absence indicated value present source/label/string? Defaults FALSE tibbles cross DT tables","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_level_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record-level table — record_level_table","text":"tibble DataTable containing per-record table shows sources (/labels/strings) item found .","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_level_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record-level table — record_level_table","text":"","code":"# Load example data from the package examplecitations_path <- system.file(\"extdata\", \"examplecitations.rds\", package = \"CiteSource\") examplecitations <- readRDS(examplecitations_path)  # Deduplicate citations and compare sources unique_citations <- dedup_citations(examplecitations) #> formatting data... #> Warning: Search contains missing values for the record_id column. A record_id will be created using row names #> identifying potential duplicates... #> identified duplicates! #> flagging potential pairs for manual dedup... #> 165 citations loaded... #> 67 duplicate citations removed... #> 98 unique citations remaining!  unique_citations |>  dplyr::filter(stringr::str_detect(cite_label, \"final\"))  |>  record_level_table(return = \"DT\")  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"class\":\"display\",\"extensions\":[\"Buttons\"],\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"],[\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\",\"&oplus;\"],[\"Beckmann et al. (2021)\",\"Bu et al. (2023)\",\"Graham et al. (2016)\",\"Johnson et al. (2019)\",\"Keeler & Kristovich (2012)\",\"Keith et al. (2021)\",\"P. Singh et al. (2022)\",\"Son et al. (2022)\",\"Stanganelli & Soravia (2012)\",\"Tsoka et al. (2021)\",\"Turner et al. (2022)\",\"C. Wang et al. (2019)\",\"Zhou et al. (2020)\",\"Zoran et al. (2016)\",\"Zoran et al. (2019)\"],[\"Beckmann, S. K., Hiete, M. & Beck, C. (2021). Threshold temperatures for subjective heat stress in urban apartments—Analysing nocturnal bedroom temperatures during a heat wave in Germany. <i>Climate Risk Management<\\/i><i>, 32<\\/i>. <a href = \\\"https://doi.org/10.1016/j.crm.2021.100286\\\">https://doi.org/10.1016/j.crm.2021.100286<\\/a>\",\"Bu, F., Yan, D., Tan, G., Sun, H. & An, J. (2023). Acceleration algorithms for long-wavelength radiation integral in the annual simulation of radiative cooling in buildings. <i>Renewable Energy<\\/i><i>, 202<\\/i>. <a href = \\\"https://doi.org/10.1016/j.renene.2022.11.091\\\">https://doi.org/10.1016/j.renene.2022.11.091<\\/a>\",\"Graham, D. A., Vanos, J. K., Kenny, N. & Brown, R. D. (2016). The relationship between neighbourhood tree canopy cover and heat-related ambulance calls during extreme heat events in Toronto, Canada. <i>Urban Forestry & Urban Greening<\\/i><i>, 20<\\/i>. <a href = \\\"https://doi.org/10.1016/j.ufug.2016.08.005\\\">https://doi.org/10.1016/j.ufug.2016.08.005<\\/a>\",\"Johnson, J. C., Urcuyo, J., Moen, C. & Stevens, D. R. (2019). Urban heat island conditions experienced by the Western black widow spider (Latrodectus hesperus): Extreme heat slows development but results in behavioral accommodations. <i>Plos One<\\/i><i>, 14<\\/i>(9). <a href = \\\"https://doi.org/10.1371/journal.pone.0220153\\\">https://doi.org/10.1371/journal.pone.0220153<\\/a>\",\"Keeler, J. M. & Kristovich, D. A. R. (2012). Observations of Urban Heat Island Influence on Lake-Breeze Frontal Movement. <i>Journal Of Applied Meteorology And Climatology<\\/i><i>, 51<\\/i>(4). <a href = \\\"https://doi.org/10.1175/jamc-d-11-0166.1\\\">https://doi.org/10.1175/jamc-d-11-0166.1<\\/a>\",\"Keith, L., Iroz-Elardo, N., Austof, E., Sami, I. & Arora, M. (2021). Extreme heat at outdoor COVID-19 vaccination sites. <i>The Journal Of Climate Change And Health<\\/i><i>, 4<\\/i>. <a href = \\\"https://doi.org/10.1016/j.joclim.2021.100043\\\">https://doi.org/10.1016/j.joclim.2021.100043<\\/a>\",\"Singh, P., Chaudhuri, A. S., Verma, P., Singh, V. K. & Meena, S. R. (2022). Earth observation data sets in monitoring of urbanization and urban heat island of Delhi, India. <i>Geomatics, Natural Hazards And Risk<\\/i><i>, 13<\\/i>(1). <a href = \\\"https://doi.org/10.1080/19475705.2022.2097452\\\">https://doi.org/10.1080/19475705.2022.2097452<\\/a>\",\"Son, J., Eum, J. & Kim, S. (2022). Wind corridor planning and management strategies using cold air characteristics: The application in Korean cities. <i>Sustainable Cities And Society<\\/i><i>, 77<\\/i>. <a href = \\\"https://doi.org/10.1016/j.scs.2021.103512\\\">https://doi.org/10.1016/j.scs.2021.103512<\\/a>\",\"Stanganelli, M. & Soravia, M. (2012). Connections between Urban Structure and Urban Heat Island Generation: An Analysis trough Remote Sensing and GIS. <i>Computational Science And Its Applications – Iccsa 2012<\\/i>. <a href = \\\"https://doi.org/10.1007/978-3-642-31075-1_45\\\">https://doi.org/10.1007/978-3-642-31075-1_45<\\/a>\",\"Tsoka, S., Velikou, K., Tolika, K. & Tsikaloudaki, A. (2021). Evaluating the Combined Effect of Climate Change and Urban Microclimate on Buildings' Heating and Cooling Energy Demand in a Mediterranean City. <i>Energies<\\/i><i>, 14<\\/i>(18). <a href = \\\"https://doi.org/10.3390/en14185799\\\">https://doi.org/10.3390/en14185799<\\/a>\",\"Turner, V. K., French, E. M., Dialesandro, J., Middel, A., Hondula, D. M., Weiss, G. B. & Abdellati, H. (2022). How are cities planning for heat? Analysis of United States municipal plans. <i>Environmental Research Letters<\\/i><i>, 17<\\/i>(6). <a href = \\\"https://doi.org/10.1088/1748-9326/ac73a9\\\">https://doi.org/10.1088/1748-9326/ac73a9<\\/a>\",\"Wang, C., Wang, Z. & Yang, J. (2019). Urban water capacity: Irrigation for heat mitigation. <i>Computers Environment And Urban Systems<\\/i><i>, 78<\\/i>. <a href = \\\"https://doi.org/10.1016/j.compenvurbsys.2019.101397\\\">https://doi.org/10.1016/j.compenvurbsys.2019.101397<\\/a>\",\"Zhou, X., Carmeliet, J., Sulzer, M. & Derome, D. (2020). Energy-efficient mitigation measures for improving indoor thermal comfort during heat waves. <i>Applied Energy<\\/i><i>, 278<\\/i>. <a href = \\\"https://doi.org/10.1016/j.apenergy.2020.115620\\\">https://doi.org/10.1016/j.apenergy.2020.115620<\\/a>\",\"Zoran, M. A., Savastru, R. S., Savastru, D. M. & Dida, A. I. (2016). Impacts of urban growth and heat waves events on the urban heat island in Bucharest city. <i>Remote Sensing Technologies And Applications In Urban Environments<\\/i><i>, 10008<\\/i>. <a href = \\\"https://doi.org/10.1117/12.2241360\\\">https://doi.org/10.1117/12.2241360<\\/a>\",\"Zoran, M. A., Savastru, R. S., Savastru, D. M., Tautan, M. N. & Baschir, L. A. (2019). Geospatial and in-situ information for assessment of urban climate. <i>Seventh International Conference On Remote Sensing And Geoinformation Of The Environment (Rscy2019)<\\/i><i>, 11174<\\/i>. <a href = \\\"https://doi.org/10.1117/12.2532253\\\">https://doi.org/10.1117/12.2532253<\\/a>\"],[false,false,false,false,false,true,false,false,false,true,false,true,true,true,true],[true,true,false,true,true,false,true,true,true,false,true,false,false,false,false],[false,false,true,false,false,false,false,false,false,false,false,false,false,false,false],[\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#10004;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#10004;\",\"&#x2717;\",\"&#10004;\",\"&#10004;\",\"&#10004;\",\"&#10004;\"],[\"&#10004;\",\"&#10004;\",\"&#x2717;\",\"&#10004;\",\"&#10004;\",\"&#x2717;\",\"&#10004;\",\"&#10004;\",\"&#10004;\",\"&#x2717;\",\"&#10004;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\"],[\"&#x2717;\",\"&#x2717;\",\"&#10004;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\",\"&#x2717;\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th rowspan=\\\"2\\\" colspan=\\\"2\\\">&nbsp;<\\/th>\\n      <th rowspan=\\\"2\\\" colspan=\\\"2\\\">Citation<\\/th>\\n      <th colspan=\\\"6\\\">Source<\\/th>\\n    <\\/tr>\\n    <tr>\\n      <th>WoS<\\/th>\\n      <th>DIM<\\/th>\\n      <th>LENS<\\/th>\\n      <th>WoS <\\/th>\\n      <th>DIM <\\/th>\\n      <th>LENS <\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n  <tfoot>\\n    <td colspan=\\\"10\\\">Click on the &oplus; to view the full reference<\\/td>\\n  <\\/tfoot>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"visible\":false,\"targets\":[0,3,4,5,6]},{\"orderable\":false,\"className\":\"details-control\",\"targets\":1},{\"orderable\":false,\"targets\":0}],\"dom\":\"Bfrtip\",\"buttons\":[\"print\",{\"extend\":\"csv\",\"filename\":\"CiteSource_record_summary\",\"text\":\"Download csv\",\"exportOptions\":{\"columns\":[0,2,3,4,5,6]}}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"callback\":\"function(table) {\\n\\n              table.column(1).nodes().to$().css({cursor: 'pointer'});\\n              var format = function(d) {\\n                return '<div style=\\\"background-color:#eee; padding: .5em;\\\">' +\\n                        d[3];\\n              };\\n              table.on('click', 'td.details-control', function() {\\n                var td = $(this), row = table.row(td.closest('tr'));\\n                if (row.child.isShown()) {\\n                  row.child.hide();\\n                  td.html('&oplus;');\\n                } else {\\n                  row.child(format(row.data())).show();\\n                  td.html('&CircleMinus;');\\n                }\\n              });\\n}\"},\"evals\":[\"callback\"],\"jsHooks\":[]}"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"search_summary_table — record_summary_table","title":"search_summary_table — record_summary_table","text":"function creates table footnotes columns table. uses gt package create table adds footnotes various columns.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"search_summary_table — record_summary_table","text":"","code":"record_summary_table(data)"},{"path":"http://www.eshackathon.org/CiteSource/reference/record_summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"search_summary_table — record_summary_table","text":"data data frame must contain columns \"Source\", \"Records Imported\", \"Distinct Records\", \"Unique records\", \"Non-unique Records\", \"Source Contribution %\", \"Source Unique Contribution %\", \"Source Unique %\". \"Source\" column used row names table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/record_summary_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"search_summary_table — record_summary_table","text":"gt object representing table.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Reimport a CSV-file exported from CiteSource — reimport_csv","title":"Reimport a CSV-file exported from CiteSource — reimport_csv","text":"function reimports csv file tagged deduplicated CiteSource. allows continue analyses without repeating step, also allows users make manual corrections tagging deduplication. Note function works CSV files written export_csv(..., separate = NULL)","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reimport a CSV-file exported from CiteSource — reimport_csv","text":"","code":"reimport_csv(filename)"},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reimport a CSV-file exported from CiteSource — reimport_csv","text":"filename Name (path) CSV file reimported, end .csv","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reimport a CSV-file exported from CiteSource — reimport_csv","text":"","code":"if (interactive()) {   dedup_results <- dedup_citations(citations, merge_citations = TRUE)   export_csv(dedup_results, \"citations.csv\")   unique_citations <- reimport_csv(\"citations.csv\") }"},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_ris.html","id":null,"dir":"Reference","previous_headings":"","what":"Reimport a RIS-file exported from CiteSource — reimport_ris","title":"Reimport a RIS-file exported from CiteSource — reimport_ris","text":"function reimports RIS file tagged deduplicated CiteSource. allows continue analyses without repeating step, also allows users make manual corrections tagging deduplication. function can also used replace import step (instance tags added individual citations rather entire files) - case, just call dedup_citations() import.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_ris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reimport a RIS-file exported from CiteSource — reimport_ris","text":"","code":"reimport_ris(   filename = \"citations.ris\",   source_field = \"DB\",   label_field = \"C7\",   string_field = \"C8\",   tag_naming = \"ris_synthesisr\",   verbose = TRUE )"},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_ris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reimport a RIS-file exported from CiteSource — reimport_ris","text":"filename Name (path) RIS file reimported, end .ris source_field Character. RIS field cite_sources read ? NULL set missing label_field Character. RIS field cite_labels read ? NULL set missing string_field Character. RIS field cite_strings read ? NULL set missing tag_naming Synthesisr option specifying RIS tags replaced names. changed using function reimport file exported CiteSource. import RIS, check names(CiteSource:::synthesisr_code_lookup) select options start ris_ verbose confirmation message displayed?","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_ris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reimport a RIS-file exported from CiteSource — reimport_ris","text":"Note functions defaults' based export_ris() functions can easily combined.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/reimport_ris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reimport a RIS-file exported from CiteSource — reimport_ris","text":"","code":"if (interactive()) {   dedup_results <- dedup_citations(citations, merge_citations = TRUE)   export_ris(dedup_results$unique, \"citations.ris\")   unique_citations2 <- reimport_ris(\"citations.ris\") }"},{"path":"http://www.eshackathon.org/CiteSource/reference/runShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","title":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","text":"Running function launch CiteSource shiny app","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/runShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","text":"","code":"runShiny(app = \"CiteSource\", offer_install = interactive())"},{"path":"http://www.eshackathon.org/CiteSource/reference/runShiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","text":"app Defaults CiteSource - possibly apps included future offer_install user prompted install required packages missing?","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/runShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","text":"CiteSource shiny app","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/runShiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper function to run Shiny Apps from CiteSource. — runShiny","text":"","code":"if (interactive()) {   # To run the CiteSource Shiny app:   runShiny() }"},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import bibliographic search results — synthesisr_read_refs","title":"Import bibliographic search results — synthesisr_read_refs","text":"Imports common bibliographic reference formats (.e. .bib, .ris, .txt).","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import bibliographic search results — synthesisr_read_refs","text":"","code":"synthesisr_read_refs(   filename,   tag_naming = \"best_guess\",   return_df = TRUE,   verbose = FALSE )  read_ref(   filename,   tag_naming = \"best_guess\",   return_df = TRUE,   verbose = FALSE )"},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import bibliographic search results — synthesisr_read_refs","text":"filename path filename vector filenames containing search results import. tag_naming Either length-1 character stating ris tags replaced (see details list options), object inheriting class data.frame containing user-defined replacement tags. return_df TRUE (default), returns data.frame; FALSE, returns list. verbose TRUE, prints status updates (defaults FALSE).","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import bibliographic search results — synthesisr_read_refs","text":"Returns data.frame list assembled search results.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import bibliographic search results — synthesisr_read_refs","text":"default argument tag_naming \"best_guess\", estimates database used ris tag replacement, fills gaps generic tags. tags missing database (.e. code_lookup) passed unchanged. options use tags Web Science (\"wos\"), Scopus (\"scopus\"), Ovid (\"ovid\") Academic Search Premier (\"asp\"). data.frame given, must contain two columns: \"code\" listing original tags source document, \"field\" listing replacement column/tag names. data.frame may optionally include third column named \"order\", specifies order columns resulting data.frame; otherwise taken row order. Finally, passing \"none\" replace_tags suppresses tag replacement.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/synthesisr_read_refs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Import bibliographic search results — synthesisr_read_refs","text":"read_ref(): Import single file","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/write_refs.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to a bibliographic format — write_bib","title":"Export data to a bibliographic format — write_bib","text":"function exports data.frames containing bibliographic information either .ris .bib file.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/write_refs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to a bibliographic format — write_bib","text":"","code":"write_bib(x)  write_ris(x, tag_naming = \"synthesisr\")  write_refs(x, format = \"ris\", tag_naming = \"synthesisr\", file = FALSE)"},{"path":"http://www.eshackathon.org/CiteSource/reference/write_refs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to a bibliographic format — write_bib","text":"x Either data.frame containing bibliographic information object class bibliography. tag_naming naming convention used write RIS files? See details options. format format data exported ? Options ris bib. file Either logical indicating whether file written (defaulting FALSE), character giving name file written.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/write_refs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to a bibliographic format — write_bib","text":"Returns character vector containing bibliographic information specified format file FALSE, saves output file TRUE.","code":""},{"path":"http://www.eshackathon.org/CiteSource/reference/write_refs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Export data to a bibliographic format — write_bib","text":"write_bib(): Format bib file export write_ris(): Format ris file export","code":""},{"path":"http://www.eshackathon.org/CiteSource/news/index.html","id":"citesource-001","dir":"Changelog","previous_headings":"","what":"CiteSource 0.0.1","title":"CiteSource 0.0.1","text":"Added NEWS.md file track changes package. Added dependency latest version ASySD R package Simplified dedup function arguments (now specified within call ASySD) Integrated new dedup function R shiny app","code":""}]
